#rm(list=ls())
infile<-"~/Downloads/SPRING 2020/Social Media and Analysis - IDS 564/Lab-2/MergerNet_Jan21_2016_forR.csv"
## Load package
library(igraph)
el=read.csv(infile, header = TRUE, sep = ",")
g_acq=graph.data.frame(el, directed = TRUE, vertices= NULL)
### List of all the years represented in the set
el[,"year"]
df <-data.frame(el)
class(df$weight)
class(df$source)
class(el)
# Edges
ecount(g_acq)
## Vertices
vcount(g_acq)
#Is it a simple graph? No!
## Check whether Self_loops exist, as do multiple edges
is.simple(g_acq)
# ---
#[1] FALSE
# ---
E(g_acq)$weight
g_acq_simpl<-simplify(g_acq)
E(g_acq_simpl)$weight
# Will use the inverse of log weight for shortest path calculations
inv_weight<-1/log(E(g_acq_simpl)$weight  + 1)
num_weight<-E(g_acq_simpl)$weight
length(inv_weight)
g_acq_simpl$nodes
V(g_acq_simpl)
vertices(g_acq_simpl)
betweenness(g_acq_simpl, v= arr , directed= TRUE, weights = inv_weight, normalized = FALSE, nobigint = TRUE)
df <- as.data.frame(betweenness(g_acq_simpl, v= V(g_acq_simpl) , directed= TRUE, weights = inv_weight, normalized = FALSE, nobigint = TRUE))
df
df[211]
rownames(df)
df$1
df$0
colnames(df) <- c('v', 'value')
df <- as.data.frame(betweenness(g_acq_simpl, v= V(g_acq_simpl) , directed= TRUE, weights = inv_weight, normalized = FALSE, nobigint = TRUE))
colnames(df) <- c('v', 'value')
df <- data.frame(rownames(df), df)
df
colnames(df) <- c('v', 'value')
df[v == 923]
df$v == 923
df[df$v == 923]
df[,df$v == 923]
df
which(df, df$v = 111)
which(df, df$v == 111)
which(df, df$v == '111')
which(df$v == '111')
which(df$v = c('111', '928'))
which(df$v in c('111', '928'))
which(df$v <- c('111', '928'))
df$v == 923
df
df <- as.data.frame(betweenness(g_acq_simpl, v= V(g_acq_simpl) , directed= TRUE, weights = inv_weight, normalized = TRUE, nobigint = TRUE))
df <- data.frame(rownames(df), df)
colnames(df) <- c('v', 'value')
df
shortest_paths(g_acq_simpl, from = "511", to = "523")
?shortest_paths
shortest_paths(g_acq_simpl, to = 523)
shortest_paths(g_acq_simpl, from = 511 ,to = 523)
shortest_paths(g_acq_simpl, from = c(511) ,to = 523)
shortest_paths(g_acq_simpl, from = c(511) ,to = c(523))
shortest_paths(g_acq_simpl, from = v(g_acq_simpl) ,to = c(523))
shortest_paths(g_acq_simpl, from = V(g_acq_simpl) ,to = c(523))
shortest_paths(g_acq_simpl, from = V(g_acq_simpl) ,to = 523)
shortest.paths(g_acq_simpl, v = c(511), to = (523), weights = inv_weight)
shortest.paths(g_acq_simpl, v = c(511), to = c(523), weights = inv_weight)
shortest.paths(g_acq_simpl, v = c(511), to = V(g_acq_simpl), weights = inv_weight)
shortest.paths(g_acq_simpl, to = V(g_acq_simpl), weights = inv_weight)
shortest.paths(g_acq_simpl, to = c(523), weights = inv_weight)
shortest.paths(g_acq_simpl, to = 523, weights = inv_weight)
shortest.paths(g_acq_simpl, 523, weights = inv_weight)
?get_shortest_path
??get_shortest_path
install.packages("rsppfp")
?get_shortest_path
??get_shortest_path
library(rsppfp)
??get_shortest_path
?get_shortest_path
get_shortest_path(g_acq_simpl, "511" , "523" , inv_weight)
get_shortest_path(g_acq_simpl, 511 , 523 , inv_weight)
#shortest.paths(g_acq_simpl, 523, weights = inv_weight)
get.shortest.paths(g_acq_simpl , 5)
shortest.paths(g_acq_simpl, v=c(511), to= V(g_acq_simpl), weights = inv_weight)
shortest.paths(g_acq_simpl,  to= V(g_acq_simpl), weights = inv_weight)
shortest.paths(g_acq_simpl,  to= V(g_acq_simpl)[68], weights = inv_weight)
shortest.paths(g_acq_simpl,  to= V(g_acq_simpl)[68], weights = inv_weight)
shortest.paths(g_acq_simpl,  from= V(g_acq_simpl)[68], weights = inv_weight)
shortest.paths(g_acq_simpl,  v= V(g_acq_simpl)[68], weights = inv_weight)
view(shortest.paths(g_acq_simpl,  v= V(g_acq_simpl)[68], weights = inv_weight))
View(shortest.paths(g_acq_simpl,  v= V(g_acq_simpl)[68], weights = inv_weight))
View(t(shortest.paths(g_acq_simpl,  v= V(g_acq_simpl)[68], weights = inv_weight)))
shortest_paths(g_acq_simpl, from = V(g_acq_simpl)[68], weights = inv_weight)
?shortest_paths
shortest_paths(g_acq_simpl, from = V(g_acq_simpl)[68], to = V(g_acq_simpl)[69] weights = inv_weight)
shortest_paths(g_acq_simpl, from = V(g_acq_simpl)[68], to = V(g_acq_simpl), weights = inv_weight)
shortest_paths(g_acq_simpl, from = V(g_acq_simpl)[68], to = V(g_acq_simpl)[69], weights = inv_weight)
?shortest.paths
distances(g_acq_simpl, v= V(g_acq_simpl)[68], weights = inv_weight)
t(distances(g_acq_simpl, v= V(g_acq_simpl)[68], weights = inv_weight))
t(distances(g_acq_simpl, v= V(g_acq_simpl)[68], weights = inv_weight, mode = "out"))
t(distances(g_acq_simpl, v= V(g_acq_simpl)[68], weights = inv_weight, mode = "in"))
shortest.paths(g_acq_simpl,  to= V(g_acq_simpl)[68], weights = inv_weight, mode = "in")
shortest.paths(g_acq_simpl,  to= V(g_acq_simpl)[68], weights = inv_weight, mode = "out")
# induced subgraph
sub_net<-induced.subgraph(g_acq_simpl, v=c('511', '541',
'518', '519', '517', '325', '423', '446', '512', '523',
'561', '621', '115', '482', '485', '487', '491', '492',
'521', '712' ))
inv_weight_1<-1/log(E(sub_net)$weight  + 1)
diameter(sub_net , weights = inv_weight_1 , directed = T)
diameter(sub_net , weights = inv_weight_1 , directed = F)
?component_distribution
components(g_acq_simpl, mode= c("weak", "strong"))
components(g_acq_simpl, mode= c("strong", "weak"))
weak
components(g_acq_simpl, mode= c("weak", "strong"))
groups(components(g_acq_simpl, mode= c("weak", "strong")))
c <- components(g_acq_simpl, mode= c("weak", "strong"))
component_distribution(g_acq_simpl , mode= c("weak", "strong"))
component_distribution(g_acq_simpl , mode= c("weak", "strong"))$is_connected
components(g_acq_simpl, mode= c("weak", "strong"))
plot(g_acq_simpl)
t <-components(g_acq_simpl, mode= c("weak", "strong"))
count_components(g_acq_simpl, mode= c("weak", "strong"))
count_components(g_acq_simpl, mode= c("strong"))
count_components(g_acq_simpl, mode= c("weak"))
plot(sub_net)
# Edges
ecount(g_acq)
## Vertices
vcount(g_acq)
t <-components(g_acq, mode= c("weak", "strong"))
count_components(g_acq, mode= c("strong"))
# 4 strong
count_components(g_acq, mode= c("weak"))
?plot
V(sub_net)[511]$color<-"red"
V(sub_net)['511']$color<-"red"
#V(sub_net)$color = c("green", "aquamarine", "yellow", "blue", "Red")
plot(sub_net)
V(sub_net)[c('511', '541', '518', '519')]$color<-c("red", "blue", "yellow", "aquamarine")
#V(sub_net)$color = c("green", "aquamarine", "yellow", "blue", "Red")
plot(sub_net)
E(sub_net)$weight <- inv_weight_1
plot(sub_net)
plot(sub_net)
V(sub_net)$size
plot(sub_net, vertex.size = inv_weight_1)
plot(sub_net)
plot(sub_net, vertex.size= degree(g)*0.5, main="Degree Centrality")
plot(sub_net, vertex.size= degree(sub_net)*0.5, main="Degree Centrality")
plot(sub_net, vertex.size= degree(sub_net)*1.5, main="Degree Centrality")
plot(sub_net, vertex.size= degree(sub_net)*1.2, main="Degree Centrality")
plot(sub_net, vertex.size= degree(sub_net)*1.2, main="Degree Centrality", layout=layout.fruchterman.reingold)
plot(sub_net, vertex.size= degree(sub_net)*1.2,
layout=layout.fruchterman.reingold, color = ategorical_pal(8))
plot(sub_net, vertex.size= degree(sub_net)*1.2,
layout=layout.fruchterman.reingold, color = categorical_pal(8))
V(sub_net)[c('511', '541', '518', '519')]$color<-c("red", "lightblue", "yellow", "aquamarine")
E(sub_net)$weight <- inv_weight_1
plot(sub_net, vertex.size= degree(sub_net)*1.2,
layout=layout.fruchterman.reingold)
title("HW_2 Graph")
plot(sub_net, vertex.size= degree(sub_net)*0.9,
layout=layout.fruchterman.reingold)
title("HW_2 Graph")
diameter(g_acq_simpl , weights = inv_weight , directed = T)
diameter(g_acq_simpl , weights = inv_weight , directed = F)
df <- as.data.frame(betweenness(g_acq_simpl, v= V(g_acq_simpl) , directed= TRUE, weights = inv_weight, normalized = TRUE, nobigint = TRUE))
View(df)
shortest.paths(g_acq_simpl,  to= V(g_acq_simpl)[68], weights = inv_weight, mode = "in")
?closeness
closeness(g_acq_simpl, vids = V(g_acq_simpl), mode = "out", weights = inv_weight)
closeness(g_acq_simpl, vids = V(g_acq_simpl), mode = "out", weights = inv_weight, normalized = TRUE)
closeness(g_acq_simpl, vids = V(g_acq_simpl), mode = "in", weights = inv_weight, normalized = TRUE)
closeness(g_acq_simpl, vids = V(g_acq_simpl), mode = "in", weights = inv_weight, normalized = FALSE)
#Read in the hs0 data over the internet using the read.table() function.
#getwd()
# Save the data file to a location on your hard drive and specify the path here (Windows systems use forward slashes)
#dir_path <-"~/YourWorkingDirectoryFilePath"
#setwd(dir_path)
# clear everything out of memory
#rm(list=ls())
infile<-"~/Downloads/SPRING 2020/Social Media and Analysis - IDS 564/Lab-2/MergerNet_Jan21_2016_forR.csv"
## Load package
library(igraph)
el=read.csv(infile, header = TRUE, sep = ",")
g_acq=graph.data.frame(el, directed = TRUE, vertices= NULL)
### List of all the years represented in the set
el[,"year"]
df <-data.frame(el)
class(df$weight)
class(df$source)
class(el)
# Edges
ecount(g_acq)
## Vertices
vcount(g_acq)
t <-components(g_acq, mode= c("weak", "strong"))
count_components(g_acq, mode= c("strong"))
# 4 strong
count_components(g_acq, mode= c("weak"))
#Is it a simple graph? No!
## Check whether Self_loops exist, as do multiple edges
is.simple(g_acq)
# ---
#[1] FALSE
# ---
E(g_acq)$weight
g_acq_simpl<-simplify(g_acq)
E(g_acq_simpl)$weight
# Will use the inverse of log weight for shortest path calculations
inv_weight<-1/log(E(g_acq_simpl)$weight  + 1)
num_weight<-E(g_acq_simpl)$weight
length(inv_weight)
diameter(g_acq_simpl , weights = inv_weight , directed = T)
diameter(g_acq_simpl , weights = inv_weight , directed = F)
df <- as.data.frame(betweenness(g_acq_simpl, v= V(g_acq_simpl) , directed= TRUE, weights = inv_weight, normalized = TRUE, nobigint = TRUE))
View(df)
closeness(g_acq_simpl, vids = V(g_acq_simpl), mode = "in", weights = inv_weight, normalized = FALSE)
closeness(g_acq_scc, vids = V(g_acq_scc), mode = "in", weights = inv_weight)
# Remove disconnected components to create a strongly connected component.
#We will use this component to calculate closeness and shortest path distances.
g_acq_scc <-g_acq_simpl - vertices('814', '925', '928')
inv_weight_scc<-1/log(E(g_acq_scc)$weight  + 1)
closeness(g_acq_scc, vids = V(g_acq_scc), mode = "in", weights = inv_weight)
closeness(g_acq_scc, vids = V(g_acq_scc), mode = "in", weights = inv_weight_scc)
?transitivity
transitivity(g_acq_simpl, type = "local", weights = inv_weight)
transitivity(g_acq_simpl, type = "global", weights = inv_weight)
mean_loc <- mean(loc)
loc <- transitivity(g_acq_simpl, type = "local", weights = inv_weight)
mean_loc <- mean(loc)
sd_loc <- sd(loc)
mean_loc
sd_loc
loc <- transitivity(g_acq_simpl, type = "local", weights = inv_weight)
mean_loc <- mean(loc)
sd_loc <- sd(loc)
mean_loc
?mean
mean_loc <- mean(loc, na.rm = TRUE)
mean_loc
sd_loc <- sd(loc)
sd_loc
?sd
sd_loc <- sd(loc, na.rm = TRUE)
sd_loc
Amazon_Responded_Oct05 <- read.csv("~/Downloads/SPRING 2020/Big Data - IDS 561/HW_2/Amazon_Responded_Oct05.csv", comment.char="#")
View(Amazon_Responded_Oct05)
data <- read.csv("~/Downloads/SPRING 2020/Big Data - IDS 561/HW_2/Amazon_Responded_Oct05.csv", comment.char="#")
View(data)
size(data)
length(data)
colnames(data)
data_1 = data[data[, "user_verifie"] == 'True',]
data_1 = data[data[, "user_verified"] == 'True',]
# cliques of size 2,3,4,5
cliques_all <- maximal.cliques(g_SAPSub_simpl)
# Ali Tafti
# Optional Advanced Lab 2: SAP Community Network
#Read in the hs0 data over the internet using the read.table() function.
getwd()
# Save the data file to a location on your hard drive and specify the path here (Windows systems use forward slashes)
dir_path <-"~/Downloads/SPRING 2020/Social Media and Analysis - IDS 564/Advanced_Lab_2/"
setwd(dir_path)
# clear everything out of memory
rm(list=ls())
# This is a 10% random sample for class exercises
infile_sub<-"SAPFull_SubGraph_EdgeList.csv"
## Load package
library(igraph)
el=read.csv(infile_sub, header = TRUE, sep = ",")
class(el)
# ---
# [1] "data.frame"
# ---
# Describe the data frame
str(el)
# Create the directed graph object
g_SAPSub=graph.data.frame(el, directed = TRUE, vertices= NULL)
# Edges
ecount(g_SAPSub)
## Vertices
vcount(g_SAPSub)
## Check whether Self_loops exist, as do multiple edges
is.simple(g_SAPSub)
# Create edge weights
E(g_SAPSub)$weight <-1
E(g_SAPSub)$weight
g_SAPSub_simpl<-simplify(g_SAPSub, edge.attr.comb="sum")
is.simple(g_SAPSub_simpl)
# Edges
ecount(g_SAPSub_simpl)
## Vertices
vcount(g_SAPSub_simpl)
# Use the inverse of log weight for some of the network measure calculations
inv_weight<-1/log(E(g_SAPSub_simpl)$weight  + 1)
num_weight<-E(g_SAPSub_simpl)$weight
length(inv_weight)
E(g_SAPSub_simpl)$weight <-inv_weight
# You can see the neighbors of some selected nodes
neighbors(g_SAPSub_simpl, v=c('900'))
neighbors(g_SAPSub_simpl, v=c('592540'))
# plot the simple graph:
plot(g_SAPSub_simpl, vertex.label= NA,
edge.arrow.size=0.7,
main="plot for simplified graph")
plot(g_SAPSub_simpl,vertex.label=V(g_SAPSub_simpl)$name, vertex.label.dist=1.5,vertex.size=8,
edge.width = 1,edge.arrow.width = 0.3, edge.arrow.size = 0.5,vertex.size2 = 3,vertex.label.cex = .75,asp = 0.5,margin = -0.2)
#plot(g_SAPSub_simpl, layout=layout.fruchterman.reingold, main="fruchterman.reingold") - Not visibily interpreatable
l <- layout.fruchterman.reingold(g_SAPSub_simpl, dim =3)
plot(g_SAPSub_simpl,vertex.label= NA,
vertex.size=3,layout = l,
edge.width = 1, edge.arrow.size = 0.6,
vertex.size2 = 5,margin = -0.2)
plot(g_SAPSub_simpl,vertex.label= NA,
vertex.size=3,layout = l,
edge.width = 1, edge.arrow.size = 0.6,
vertex.size2 = 5,margin = -0.2)
plot(g_SAPSub_simpl,vertex.label= NA,vertex.size=3,layout = l,edge.width = 1, edge.arrow.size = 0.6,vertex.size2 = 5,margin = -0.2)
reciprocity(g_SAPSub_simpl)
is.connected(g_SAPSub_simpl)
is.connected(g_SAPSub_simpl, mode="strong")
is.connected(g_SAPSub_simpl, mode="weak")
# Clustering
transitivity(g_SAPSub_simpl, weights = inv_weight)
# Avg. path length and diameter
average.path.length(g_SAPSub_simpl, directed=TRUE)
diameter(g_SAPSub_simpl)
diameter(g_SAPSub_simpl, weights= num_weight)
diameter(g_SAPSub_simpl, weights= inv_weight)
# Summarize the graph structure
summary(g_SAPSub_simpl)
# cliques of size 2,3,4,5
cliques_all <- maximal.cliques(g_SAPSub_simpl)
largest_cliq <- largest.cliques(g_SAPSub_simpl)
cliques <- c(largest_cliq[[1]],largest_cliq[[2]],largest_cliq[[3]],largest_cliq[[4]],largest_cliq[[5]])
View(cliques)
g2 <- induced.subgraph(graph=g_SAPSub_simpl,vids=(cliques))
plot(g2,main="cliques of size 5")
plot(g2,main="Cliques with size 5")
fourcliques <- max_cliques(g_SAPSub_simpl, min = 4, max = 4, subset = NULL,file = NULL)
# Clique structure: 5 cliques of size 5, 39 cliques of size 4, 335 triangles
table(sapply(maximal.cliques(g_SAPSub_simpl), length))
fourcliques <- max_cliques(g_SAPSub_simpl, min = 4, max = 4, subset = NULL,file = NULL)
fourcliquesall<- c()
for (i in c(1:39)) {
fourcliquesall.append(fourcliques[[i]])
}
fourcliquesall<- c()
for (i in c(1:39)) {
fourcliquesall <- c(fourcliquesall,fourcliques[[i]])
}
fourcliquesall
g2 <- induced.subgraph(graph=g_SAPSub_simpl,vids=(fourcliquesall))
plot(g2,main="cliques of size 4")
plot(g2,vertex.label=V(g2)$name, vertex.label.dist=1.5,vertex.size=8,
edge.width = 1,edge.arrow.width = 0.3, edge.arrow.size = 0.5,vertex.size2 = 3,vertex.label.cex = .75,asp = 0.5,margin = -0.2)
threecliques <- max_cliques(g_SAPSub_simpl, min = 3, max = 3, subset = NULL,file = NULL)
threecliquesall<- c()
for (i in c(1:335)) {
threecliquesall <- c(threecliquesall,threecliques[[i]])
}
threecliquesall
g3 <- induced.subgraph(graph=g_SAPSub_simpl,vids=(threecliquesall))
plot(g3,main="cliques of size 4")
plot(g3,vertex.label=V(g3)$name, vertex.label.dist=1.5,vertex.size=8,
edge.width = 1,edge.arrow.width = 0.3, edge.arrow.size = 0.5,vertex.size2 = 3,vertex.label.cex = .75,asp = 0.5,margin = -0.2)
title("cliques of size 3")
plot(g3,vertex.label=V(g3)$name, vertex.label.dist=1.5,vertex.size=8,
edge.width = 1,edge.arrow.width = 0.3, edge.arrow.size = 0.5,vertex.size2 = 3,vertex.label.cex = .75,asp = 0.5,margin = -0.2, main="cliques of size 3")
g2 <- induced.subgraph(graph=g_SAPSub_simpl,vids=(fourcliquesall))
plot(g2,vertex.label=V(g2)$name, vertex.label.dist=1.5,vertex.size=8,
edge.width = 1,edge.arrow.width = 0.3, edge.arrow.size = 0.5,
vertex.size2 = 3,vertex.label.cex = .75,asp = 0.5,margin = -0.2, main="cliques of size 4")
# two cliques
# three cliques
twocliques <- max_cliques(g_SAPSub_simpl, min = 2, max = 2, subset = NULL,file = NULL)
twocliquesall<- c()
for (i in c(1:3320)) {
twocliquesall <- c(twocliquesall,twocliques[[i]])
}
g4 <- induced.subgraph(graph=g_SAPSub_simpl,vids=(twocliquesall))
plot(g4,vertex.label=V(g4)$name, vertex.label.dist=1.5,vertex.size=8,
edge.width = 1,edge.arrow.width = 0.3, edge.arrow.size = 0.5,vertex.size2 = 3,vertex.label.cex = .75,asp = 0.5,margin = -0.2, main="cliques of size 2")
# Regular weight
E(g_SAPSub_simpl)$weight <- num_weight
# Embeddedness/ n (see Burt 2004)
constraints_SAP <- round(constraint(g_SAPSub_simpl, nodes=V(g_SAPSub_simpl)), digits=4)
# Degree centrality
degree_sap <- degree(g_SAPSub_simpl)
# Node betweenness
betweens_SAP <- round(betweenness(g_SAPSub_simpl, v=V(g_SAPSub_simpl), directed = TRUE, nobigint =TRUE, normalized = FALSE))
# Edge betwenness
edgebetweens_SAP<-edge.betweenness(g_SAPSub_simpl, e=E(g_SAPSub_simpl), directed = TRUE)
# Local clustering coefficients
clustering_SAP <- transitivity(g_SAPSub_simpl, type="local", vids=V(g_SAPSub_simpl))
constraints_SAP
# Embeddedness/ n (see Burt 2004)
constraints_SAP <- round(constraint(g_SAPSub_simpl, nodes=V(g_SAPSub_simpl)), digits=4)
constraints_SAP
df<-data.frame(constraints_SAP)
df<-data.frame(rownames(df),constraints_SAP)
colnames(df)<-c('Vertex','constraints_SAP')
top20_holes<-constraint_df[order(constraint_df$constraints_SAP),][1:20,]
vertex1<-as.character((top20_holes$Vertex))
top20_holes_subgraph<-induced_subgraph(g_SAPSub_simpl,vids=vertex1)
plot(top20_holes_subgraph,vertex.size=15,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top 20 Nodes with Highest Structural Hole")
top20_holes<-df[order(df$constraints_SAP),][1:20,]
vertex1<-as.character((top20_holes$Vertex))
top20_holes_subgraph<-induced_subgraph(g_SAPSub_simpl,vids=vertex1)
plot(top20_holes_subgraph,vertex.size=15,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top 20 Nodes with Highest Structural Hole")
# Plots 1 and 2: Can run them together
par(mfrow=c(1, 2))
edge_frame<-data.frame(edgebetweens_SAP, num_weight, inv_weight)
a_edge<-aggregate(edgebetweens_SAP ~ inv_weight, data=edge_frame, mean)
plot(a_edge, col="blue", log="xy", xlab="Weight of edge", ylab="Average Betweenness of edges")
node_frame<-data.frame(betweens_SAP, constraints_SAP, clustering_SAP, degree_sap)
a_node<-aggregate(betweens_SAP ~ clustering_SAP, data=node_frame, mean)
plot(a_node, col="blue", log="xy", xlab="Clustering", ylab="Average Betweenness of nodes")
# Plot set 2: Four plots
par(mfrow=c(2, 2))
a_node<-aggregate(constraints_SAP ~ degree_sap, data=node_frame, mean)
plot(a_node, col="blue", log="xy", xlab="Degree", ylab="Average Constraint (Embeddedness)")
a_node<-aggregate(clustering_SAP ~ degree_sap, data=node_frame, mean)
plot(a_node, col="blue", log="xy", xlab="Degree", ylab="Average Clustering")
a_edge<-aggregate(edgebetweens_SAP ~ num_weight, data=edge_frame, mean)
plot(a_edge, col="blue", log="xy", xlab="Weight of edge", ylab="Average Betweenness of edges")
plot(a_node, col="blue", log="xy", xlab="Degree", ylab="Average Betweenness")
# Plot set 2: Four plots
par(mfrow=c(2, 2))
a_node<-aggregate(betweens_SAP ~ degree_sap, data=node_frame, mean)
plot(a_node, col="blue", log="xy", xlab="Degree", ylab="Average Betweenness")
a_edge<-aggregate(edgebetweens_SAP ~ num_weight, data=edge_frame, mean)
plot(a_edge, col="blue", log="xy", xlab="Weight of edge", ylab="Average Betweenness of edges")
a_node<-aggregate(clustering_SAP ~ degree_sap, data=node_frame, mean)
plot(a_node, col="blue", log="xy", xlab="Degree", ylab="Average Clustering")
degree_sap <- degree(g_SAPSub_simpl)
View(degree_sap)
degree_sap <- degree(g_SAPSub_simpl)
df_1<-data.frame(rownames(df_1),degree_sap)
degree_sap <- degree(g_SAPSub_simpl)
#View(degree_sap)
df_1<-data.frame(degree_sap)
df_1<-data.frame(rownames(df_1),degree_sap)
colnames(df_1)<-c('Vertex','constraints_SAP')
top20_degreee<-df[order(df$degree_sap),][1:20,]
colnames(df_1)<-c('Vertex','degree_SAP')
top20_degreee<-df[order(df$degree_SAP),][1:20,]
_
degree_sap <- degree(g_SAPSub_simpl)
#View(degree_sap)
df_1<-data.frame(degree_sap)
df_1<-data.frame(rownames(df_1),degree_sap)
colnames(df_1)<-c('Vertex','degree_SAP')
top20_degreee<-df[order(df$degree_SAP),][1:20,]
top20_degreee<-df[order(df_1$degree_SAP),][1:20,]
vertex2<-as.character((top20_degreee$Vertex))
top20_degree_subgraph<-induced_subgraph(g_SAPSub_simpl,vids=vertex2)
plot(top20_holes_subgraph,vertex.size=15,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top 20 Nodes with Highest Structural Hole")
plot(top20_degree_subgraph,vertex.size=15,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top 20 Nodes with Highest Degree")
degree_sap <- degree(g_SAPSub_simpl)
#View(degree_sap)
df_1<-data.frame(degree_sap)
df_1<-data.frame(rownames(df_1),degree_sap)
colnames(df_1)<-c('Vertex','degree_SAP')
top20_degreee<-df[order(df_1$degree_SAP),][1:20,]
vertex2<-as.character((top20_degreee$Vertex))
top20_degree_subgraph<-induced_subgraph(g_SAPSub_simpl,vids=vertex2)
plot(top20_degree_subgraph,vertex.size=15,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top 20 Nodes with Highest Degree")
degree_sap <- degree(g_SAPSub_simpl)
#View(degree_sap)
df_1<-data.frame(degree_sap)
df_1<-data.frame(rownames(df_1),degree_sap)
colnames(df_1)<-c('Vertex','degree_SAP')
top20_degreee<-df[order(df_1$degree_SAP),][1:50,]
vertex2<-as.character((top20_degreee$Vertex))
top20_degree_subgraph<-induced_subgraph(g_SAPSub_simpl,vids=vertex2)
plot(top20_degree_subgraph,vertex.size=15,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top 20 Nodes with Highest Degree")
vertex2<-as.character(top20_degreee$Vertex)
top20_degree_subgraph<-induced_subgraph(g_SAPSub_simpl,vids=vertex2)
plot(top20_degree_subgraph,vertex.size=15,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top 20 Nodes with Highest Degree")
degree_sap <- degree(g_SAPSub_simpl)
degree_df<-data.frame(degree_sap)
degree_df<-data.frame(rownames(degree_df),degree_sap)
colnames(degree_df)<-c('Vertex','Degree')
top20_degree<-degree_df[order(degree_df$Degree,decreasing = T),][1:20,]
d1<-as.character(top20_degree$Vertex)
top20_degree_subgraph<-induced_subgraph(g_SAPSub_simpl,vids=d1)
plot(top20_degree_subgraph,vertex.size=degree(top20_degree_subgraph)*3,vertex.color='lightblue',edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top-20 Nodes with Highest Degree")
plot(top20_degree_subgraph,vertex.size=degree(top20_degree_subgraph)*3,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7) + title("Top-20 Nodes with Highest Degree")
plot(top20_degree_subgraph,vertex.size=degree(top20_degree_subgraph)*3,edge.color='black',
edge.arrow.width=0.3,vertex.label.cex=0.7)
